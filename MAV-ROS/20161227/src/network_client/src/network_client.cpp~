#include <ros/ros.h>
#include <stdio.h>
#include <cstdlib>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <network_client/Optitrack.h>
#include <network_client/Optitrack_data.h>

ros::Publisher  network_cmd_pub;
ros::Publisher  network_data_pub;

/**TCP/IP Data Trans**/
union Receive
{
	char chRecBuf[44];
	float flRecBuf[11];
};

union test
{
	char a[2];
	short data;
};

test testdata;
Receive ReceiveData;
int sockClient;
sockaddr_in addrServer;

network_client::Optitrack optitrack_cmd;
network_client::Optitrack_data optitrack_data;

void Init_Internet_client(void);
void Network_CMD_Publish(void);
void Network_Data_Publish(void);

int main(int argc, char **argv)
{

	ros::init(argc, argv, "network_client");
	ROS_INFO("network_client start");

	ros::NodeHandle m_network_nh;

	network_cmd_pub	= m_network_nh.advertise<network_client::Optitrack>("/network_client/network_cmd", 10);
	network_data_pub = m_network_nh.advertise<network_client::Optitrack_data>("/network_client/network_optitrack_data", 10);
	/**test for client_node**/
	
	testdata.data=0x0102;
	printf("data is:%d %d\n",testdata.a[0],testdata.a[1]);

	while(ros::ok())
	{
		optitrack_cmd.health_flag = 1;
		optitrack_cmd.cmdtype = 2;
		char ch = (char)getchar();
		if(ch != '\n')
		{
			printf("cmd is:%c\n",ch);
		    optitrack_cmd.control_cmd = ch;
			Network_CMD_Publish();
		}
	}
	

	Init_Internet_client();

	while(ros::ok())
	{
	ros::spinOnce();
	int Recv = recv(sockClient,ReceiveData.chRecBuf,44,0);
        if(Recv > 0)
        {
            if((ReceiveData.chRecBuf[0] != 0x55) && (ReceiveData.chRecBuf[43] != 0xAA))
            {
                printf("error\n");
            }
            else
            {
                optitrack_cmd.health_flag = 1;
                optitrack_data.network_health_flag = 1;
                if(ReceiveData.chRecBuf[1] == 0x01) //Velt
                {
                    optitrack_cmd.cmdtype = 1;
                    optitrack_cmd.x = ReceiveData.flRecBuf[1];
                    optitrack_cmd.y = ReceiveData.flRecBuf[2];
                    optitrack_cmd.z = ReceiveData.flRecBuf[3];
                    Network_CMD_Publish();
                }
                else if(ReceiveData.chRecBuf[1] == 0x02) //Command
                {
                    optitrack_cmd.cmdtype = 2;
                    optitrack_cmd.control_cmd = ReceiveData.chRecBuf[2];
                    Network_CMD_Publish();
                }
                else if(ReceiveData.chRecBuf[1] == 0x03) //Attitude
                {
                    optitrack_cmd.cmdtype = 3;
                    optitrack_cmd.x = ReceiveData.flRecBuf[1];
                    optitrack_cmd.y = ReceiveData.flRecBuf[2];
                    optitrack_cmd.z = ReceiveData.flRecBuf[3];
                    Network_CMD_Publish();
                }
                else if(ReceiveData.chRecBuf[1] == 0x04) //Pos
                {
                    optitrack_cmd.cmdtype = 4;
                    optitrack_cmd.x = ReceiveData.flRecBuf[1];
                    optitrack_cmd.y = ReceiveData.flRecBuf[2];
                    optitrack_cmd.z = ReceiveData.flRecBuf[3];
                    Network_CMD_Publish();
                }
                else if(ReceiveData.chRecBuf[1] == 0x05) //data
                {
                	optitrack_data.posx = ReceiveData.flRecBuf[1];
                	optitrack_data.posy = ReceiveData.flRecBuf[2];
                	optitrack_data.posz = ReceiveData.flRecBuf[3];
                	optitrack_data.roll = ReceiveData.flRecBuf[4];
                	optitrack_data.yaw = ReceiveData.flRecBuf[5];
                	optitrack_data.pitch = ReceiveData.flRecBuf[6];
                	optitrack_data.veltx = ReceiveData.flRecBuf[7];
                	optitrack_data.velty = ReceiveData.flRecBuf[8];
                	optitrack_data.veltz = ReceiveData.flRecBuf[9];

                	optitrack_data.health_flag = ReceiveData.chRecBuf[3];
                	Network_Data_Publish();
                }
            }
        }
        else if(Recv == 0)
        {
            optitrack_cmd.health_flag = 0;
            optitrack_cmd.cmdtype = 0;
            optitrack_cmd.x = 0;
            optitrack_cmd.y = 0;
            optitrack_cmd.z = 0;
            Network_CMD_Publish();
            optitrack_data.network_health_flag = 0;
            Network_Data_Publish();
            close(sockClient);
        }
        else if(Recv == -1)
        {
            optitrack_cmd.health_flag = 0;
            optitrack_cmd.cmdtype = 0;
            optitrack_cmd.x = 0;
            optitrack_cmd.y = 0;
            optitrack_cmd.z = 0;
            Network_CMD_Publish();
            optitrack_data.network_health_flag = 0;
            Network_Data_Publish();
            Init_Internet_client();
        }
	}
	close(sockClient);
	printf("close client.\n");
}

void Init_Internet_client(void)
{
	sockClient=socket(AF_INET,SOCK_STREAM,0);
	addrServer.sin_addr.s_addr = inet_addr("192.168.1.254");
	addrServer.sin_family=AF_INET;
	addrServer.sin_port=htons(6000);
	while(ros::ok())
	{
		//printf("connecting....\n");
		int connect_flag = connect(sockClient,(sockaddr*)&addrServer,sizeof(sockaddr));
		if(connect_flag == 0)
		{
			//printf("connect server succeed\n");
			break;
		}
		else
		{
			//printf("connect server failed,retry\n");
		}
	}
}

void Network_CMD_Publish(void)
{
    network_client::Optitrack net_cmd;
    net_cmd.header.frame_id = "network_client";
    net_cmd.header.stamp    = ros::Time::now();

    net_cmd.cmdtype =  optitrack_cmd.cmdtype;
    net_cmd.control_cmd = optitrack_cmd.control_cmd;
    net_cmd.x = optitrack_cmd.x;
    net_cmd.y = optitrack_cmd.y;
    net_cmd.z = optitrack_cmd.z;
    net_cmd.health_flag = optitrack_cmd.health_flag;
    network_cmd_pub.publish(net_cmd);
}

void Network_Data_Publish(void)
{
    network_client::Optitrack_data net_data;
    net_data.header.frame_id = "network_client";
    net_data.header.stamp    = ros::Time::now();

    net_data.posx = optitrack_data.posx;
    net_data.posy = optitrack_data.posy;
    net_data.posz = optitrack_data.posz;
    net_data.roll = optitrack_data.roll;
    net_data.yaw = optitrack_data.yaw;
    net_data.pitch = optitrack_data.pitch;
    net_data.veltx = optitrack_data.veltx;
    net_data.velty = optitrack_data.velty;
    net_data.veltz = optitrack_data.veltz;
    net_data.health_flag = optitrack_data.health_flag;
    net_data.network_health_flag = optitrack_data.network_health_flag;

    network_data_pub.publish(net_data);
}

